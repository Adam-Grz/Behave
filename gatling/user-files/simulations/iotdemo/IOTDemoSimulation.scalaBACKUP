package iotdemo

import io.gatling.core.Predef._
import io.gatling.core.structure.PopulationBuilder
import io.gatling.http.Predef._
import scala.concurrent.duration._
import scala.util.Random
import java.time.LocalTime


trait Scenario extends Simulation {

  val httpConf = http
    .baseURL("http://192.168.99.100") // Here is the root for all relative URLs
    .acceptHeader("text/plain,text/html,application/xhtml+xml,application/json,application/xml;q=0.9,*/*;q=0.8") // Here are the common headers
    .doNotTrackHeader("1")
    .acceptLanguageHeader("en-US,en;q=0.5")
    .acceptEncodingHeader("gzip, deflate")
    .userAgentHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:16.0) Gecko/20100101 Firefox/16.0")

  val headers = Map("Content-Type" -> "application/json") // Note the headers specific to a given request

  val r = scala.util.Random
  var abc = r.nextInt(50)+20
  var abcd = (abc.toDouble)/10000
  var latitude = 53.43+abcd
  var longitude = -2.159-abcd
  var meter = "meter" + r.nextPrintableChar + r.nextPrintableChar + r.nextPrintableChar + r.nextPrintableChar + r.nextPrintableChar
  var houseId = "abcde" + r.nextPrintableChar + r.nextPrintableChar + r.nextPrintableChar + r.nextPrintableChar + r.nextPrintableChar
  val reading = "reading"
  val n = "n"
  
  val periods = r.nextInt(2)

  // CHANGES START HERE....
  // Values below are taken from https://www.elexon.co.uk/wp-content/uploads/2013/11/load_profiles_v2.0_cgi.pdf, Figure 1

  // User profiles
  val domesticUser = List(330,280,260,240,230,220,220,210,210,210,
             230,260,330,430,510,540,550,520,490,470,
             460,450,440,470,500,480,450,430,420,430,
             460,510,590,720,820,860,860,850,830,800,
             760,740,720,680,640,550,470,400)

  val nonDomesticUser = List(3000,4000,4900,4900,4800,4650,4400,4300,4150,4000,
             3900,3800,3700,3700,3800,4100,4400,4700,5100,5350,
             5500,5500,5450,5400,5350,5200,5050,4900,4900,4850,
             4800,4750,4700,4500,4300,3800,3400,3100,2850,2700,
             2600,2500,2500,2400,2300,2300,2250,2500)

  val userTypes = Array(domesticUser, nonDomesticUser)


  // Apply a given user profile
  def applyUserProfile(usageProfile: List[Int]) = {
    require(usageProfile.length == 48, "We should have usage readings for the day taken at 30 minute intervals")

    foreach(usageProfile, reading, n) {
      exec(
        http("Add a reading")
          .post(":9003/meters/${myresponseId}")
          .headers(headers)
          .body(StringBody("""{
            "timestamp" : 10,
            "power" : ${reading}
          }""")).asJSON
       )
      //.pause(150 milliseconds, 500 milliseconds)
//      .doIfEquals("${n}", 10) {
//	     rendezVous(120)
//	  }
   }
  }

  // Create a new meter given a new set of user details
  def addMeter(description: String, houseId: String, latitude: Double, longitude: Double) =
    http("Add a meter")
      .post(":9002/meters")
      .headers(headers)
      .body(StringBody(s"""{
               "location": {
                     "latitude" : $latitude,
                     "longitude" : $longitude
                    },
               "metadata": {
                     "description": "$description",
                     "houseId": "$houseId"
                    }
      }""")).asJSON
      .check(jsonPath("$.id").saveAs("myresponseId"))
    

  // Extract the average consumption
  def averageConsumption() =
    http("Get average consumption")
      .get(":9002/meters/${myresponseId}")
      .headers(headers)
      .check(jsonPath("$.averageConsumption").ofType[Double].saveAs("avgC"))


  def scen(name: String) = {
   scenario(name)
	   .randomSwitch(
          50.0 -> exec(_.set(reading, 0))
          .pause(1)
          .exec(addMeter(meter, houseId, latitude, longitude))
          .exec(applyUserProfile(domesticUser))
//          .rendezVous(20)
          .exec(averageConsumption()),

          50.0 -> exec(_.set(reading, 0))
          .pause(1)
          .exec(addMeter(meter, houseId, latitude, longitude))

          .exec(applyUserProfile(nonDomesticUser))
//          .rendezVous(20)
          .exec(averageConsumption())
          )

	  
	  // FIXME: for debugging?
	  .exec(session => {
		val aaa = session.get("avgC").asOption[String]
		println("Average Consumption ---->    " + aaa)
		session
	  })
	  
	  
	}
	  

//END OF SIMULATION BRACE
}


class A_One_Domestic_User extends Scenario {

  //val profile = Random.shuffle(userTypes.toList).head

  setUp(scen("Add a meter, submit readings and get average consumption for a domestic user" 
  ).inject(constantUsersPerSec(20) during(50.second)).protocols(httpConf))
  
}


class TEST extends Scenario {

  //val profile = Random.shuffle(userTypes.toList).head

  setUp(scen("Add a meter, submit readings and get average consumption for a domestic user"
  ).inject(atOnceUsers(50)).protocols(httpConf))
  
}

/*

class B_One_Non_Domestic_User extends Scenario {

  setUp(scen("Add a meter, submit readings and get average consumption for a non-domestic unrestricted customer",
   nonDomesticUser, 0).inject(atOnceUsers(1)).protocols(httpConf))
  
}

class C_One_Domestic_User_Longer_Period extends Scenario {

  setUp(scen("Add a meter, submit readings and get average consumption for a domestic user (longer periods)",
   domesticUser, 1).inject(atOnceUsers(1)).protocols(httpConf))
  
}

class D_10_Non_Domestic_Users extends Scenario {

  setUp(scen("Add a meter, submit readings and get average consumption for 10 non-domestic unrestricted customers (1 second period)",
   nonDomesticUser, 1).inject(atOnceUsers(10)).protocols(httpConf))
  
}

class E_150_Non_Domestic_Users_Longer_Period extends Scenario {

  setUp(scen("Add a meter, submit readings and get average consumption for 150 non-domestic unrestricted customers (1 second period)",
   nonDomesticUser, 1).inject(atOnceUsers(150)).protocols(httpConf))
  
}

class F_100_Non_Domestic_Users_Ramp_Up_Longer_Period extends Scenario {

  setUp(scen("Add a meter, submit readings and get average consumption for 100 ramped up non-domestic unrestricted customers (1 second period)",
   nonDomesticUser, 1).inject(rampUsers(100) over(100 seconds)).protocols(httpConf))
  
}

class G_Non_Domestic_Users_Complex_Setup_Longer_Period extends Scenario {

  setUp(scen("Add a meter, submit readings and get average consumption for non-domestic customers in complex setup (1 second period)",
   nonDomesticUser, 1).inject(
  atOnceUsers(20),
  rampUsers(100) over(100 seconds),
  constantUsersPerSec(2) during(30 seconds),
  rampUsers(80) over(40 seconds),
  constantUsersPerSec(2) during(60 seconds))
  .protocols(httpConf))
  
}

*/



/*
class B_FiveUserScenario extends Scenario {
  setUp(scn.inject(atOnceUsers(5)).protocols(httpConf))
  
}
class C_ManyUserScenario extends Scenario {
  setUp(
  scn.inject(
    nothingFor(4 seconds), // 1
    atOnceUsers(10), // 2
    rampUsers(10) over(5 seconds), // 3
    constantUsersPerSec(20) during(15 seconds), // 4
    constantUsersPerSec(20) during(15 seconds) randomized, // 5
    rampUsersPerSec(10) to 20 during(50 seconds), // 6
    rampUsersPerSec(10) to 20 during(50 seconds) randomized)
  .protocols(httpConf))
  
}
class D_COUNT extends Scenario {
  setUp(
  scn.inject(
    atOnceUsers(1000)
    )
  .protocols(httpConf))
  
}
class ExampleSimulation extends Scenario {
  
  def experiment(n: Int) = {
    scnF(n).inject(
      atOnceUsers(n),
      nothingFor(5.seconds)
      )
    .protocols(httpConf)
  }
  //val steps: List[PopulationBuilder] = (10 to 20 by 5).map(n => experiment(n)).toList
  //setUp(steps: _*)
  
  setUp(scn.inject(atOnceUsers(10), nothingFor(5.seconds), atOnceUsers(15), nothingFor(5.seconds), atOnceUsers(20)))
  
}
*/
